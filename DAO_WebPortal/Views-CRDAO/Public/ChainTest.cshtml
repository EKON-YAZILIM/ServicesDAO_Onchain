@using DAO_WebPortal.Resources
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@{
    Layout = "../Shared/_PublicLayout.cshtml";
}
<partial name="../Shared/_PublicHeaderPartial" />

<main class="nk-pages">
    <section class="section section-contact bg-transparent">

        <div class="container">

            <!-- The button to connect your website into Casper signer wallet. -->
            <button id="btnConnect" onclick="Connect();">Connect</button>

            <!-- The button to disconnect your website into Casper signer wallet -->
            <button id="btnDisconnect" onclick="Disconnect();" >Disconnect</button>

            <!-- The place where the public key will display. -->
            <h3 id="textAddress">PublicKeyHex </h3>

            <!-- The place where Balance will display. -->
            <h3 id="textBalance">Balance </h3>
            <h3>Transer</h3>

            <!-- The amount to send in the transaction. -->
            <!-- Minimal amount is 2.5CSPR so 2.5 * 10000 (1CSPR = 10.000 motes)  -->
            <label for="Amount">Amount - min amount 25000000000</label>
            <input id="Amount" type="number">

            <!-- The address that will receive the coins. -->
            <label for="Recipient">Recipient</label>
            <input id="Recipient" type="text">

            <!--The button that when clicked will send the transaction. -->
            <button id="btnSend" onclick="SendTransaction();" >Send</button>

            <!--The address of your transaction. -->
            <h1 id="tx"></h1>

        </div>

    </section>
</main>


@section Scripts
{
    <script>
        //const apiUrl = "http://136.243.187.84:7777/rpc"; //TESTNET
        const apiUrl = "http://3.140.179.157:7777/rpc";  //INTEGRATION
        const casperService = new CasperServiceByJsonRPC(apiUrl);
        const casperClient = new CasperClient(apiUrl);

        async function Connect(){
            
            await window.casperlabsHelper.requestConnection();

            const isConnected = window.casperlabsHelper.isConnected();

            if (isConnected) {
                const publicKey = await window.casperlabsHelper.getActivePublicKey();
                $("#textAddress").html($("#textAddress").html() + " "+ publicKey);

                $.ajax({
                    type: "GET",
                    url: "../Chain/GetBalance?accountKey=" + publicKey,
                    success: function (result) {
                        console.log(result);   
                        $("#textBalance").html($("#textBalance").html()+" "+ result.result.balance_value);    
                    },
                    failure: function (response) {             
                    },
                    error: function (response) {
                             
                    }
                });
            }
        }

        function Disconnect(){
            window.casperlabsHelper.disconnectFromSite();
        }

        function SendTransaction(){
            //sendTransactionC();
            //sendTransactionJS();
            //contractCallJS();
            contractCallJS2();
        }

        async function sendTransactionC(){
            const isConnected = window.casperlabsHelper.isConnected();

            if (isConnected) {
                const publicKey = await window.casperlabsHelper.getActivePublicKey();
                const recipient = $("#Recipient").val();
                var unsignedJson = {};
                $.ajax({
                    type: "GET",
                    url: "../Public/CreateDeployObject?fromAccount="+publicKey+"&toAccount="+recipient+"&amount="+$("#Amount").val(),
                    async:false,
                    success: function (result) {
                        console.log(result);   
                        unsignedJson = JSON.parse(result);          
                    },
                    failure: function (response) {             
                    },
                    error: function (response) {                       
                    }
                });

                @* const dpl = DeployUtil.deployFromJson(unsignedJson);
                const jsons = DeployUtil.deployToJson(dpl.val);
                console.log(jsons); *@
                const signature = await window.casperlabsHelper.sign(unsignedJson, publicKey,recipient);
                const deployObject = DeployUtil.deployFromJson(signature);
                console.log(deployObject);
                // Here we are sending the signed deploy.
                //const signed = casperClient.putDeploy(deployObject.val);

                // Display transaction address
                //const tx = document.getElementById("tx")
                //tx.textContent = 'tx: ${signed}'
            }
        }

        //Simple transfer test
        async function sendTransactionJS(){
            // get address to send from input.
            const to = document.getElementById("Recipient").value;
            // get amount to send from input.
            const amount = document.getElementById("Amount").value
            // For native-transfers the payment price is fixed.
            const paymentAmount = 10000000000;
            
            // transfer_id field in the request to tag the transaction and to correlate it to your back-end storage.
            const id = 287821;
            
            // gasPrice for native transfers can be set to 1.
            const gasPrice = 1;
            
            // Time that the deploy will remain valid for, in milliseconds
            // The default value is 1800000 ms (30 minutes).
            const ttl = 1800000;
            const publicKeyHex = await window.casperlabsHelper.getActivePublicKey();
            const publicKey = CLPublicKey.fromHex(publicKeyHex)
            
            let deployParams = new DeployUtil.DeployParams(publicKey,"integration-test",gasPrice,ttl );
            
            // We create a public key from account-address (it is the hex representation of the public-key with an added prefix).
            const toPublicKey = CLPublicKey.fromHex(to);
            
            const session = DeployUtil.ExecutableDeployItem.newTransfer( amount,toPublicKey,null,id);
            
            const payment = DeployUtil.standardPayment(paymentAmount);
            const deploy = DeployUtil.makeDeploy(deployParams, session, payment);
            
            // Turn your transaction data to format JSON
            const json = DeployUtil.deployToJson(deploy)
            console.log(json);

            // Sign transcation using casper-signer.
            const signature = await window.casperlabsHelper.sign(json,publicKeyHex,to)
            const deployObject = DeployUtil.deployFromJson(signature)

            // Here we are sending the signed deploy.
            const signed = await casperClient.putDeploy(deployObject.val);
            
            // Display transaction address
            const tx = document.getElementById("tx")
            tx.textContent = `tx: ${signed}`
  
  
  
  
        }

        //Contract call test
        async function contractCallJS(){
            
            //Contract parameters
            const chainName = "integration-test";
            const paymentAmount = 10000000000;             
            const keys = {};
            const dependencies = [];
            const ttl = 1800000;
            const entryPoint = "update_at";
            const contractHash = "e0341dd5461ffa24d659550cbb5bfd4525f733d3f5a8b8aa7c06a842359bc01d";
            const contractHashAsByteArray = CasperClientHelper.utils.contractHashToByteArray(contractHash);
            const contractVersion = 1;

            var dependenciesBytes = dependencies.map(function (d) { return Uint8Array.from(Buffer.from(d, "hex")); });

            //Get user's public key from signer
            const publicKeyHex = await window.casperlabsHelper.getActivePublicKey();
            const publicKey = CLPublicKey.fromHex(publicKeyHex);
  
            //Create contract arguments
            const valueBytes = new TextEncoder().encode("abc");
            const activationtime = new CLU64(123);
            console.log(activationtime);
            const runtimeArgs = RuntimeArgs.fromMap({
                key: CLValueBuilder.string("hello"),
                value: CLValueBuilder.list([new CLU8(255), new CLU8(254)]),
                activation_time: CLValueBuilder.option(tsresult.None, new CLU64Type)
            });

            //Create deploy object
            let deploy = DeployUtil.makeDeploy(
                new DeployUtil.DeployParams(publicKey, chainName, 1, ttl, dependenciesBytes),
                DeployUtil.ExecutableDeployItem.newStoredVersionContractByHash(
                contractHashAsByteArray,
                contractVersion,
                entryPoint,
                runtimeArgs
                ),
                DeployUtil.standardPayment(paymentAmount)
            );
            console.log(deploy);

            // Turn your transaction data to format JSON
            const json = DeployUtil.deployToJson(deploy)
            console.log(json);

            // Sign transcation using casper-signer.
            const signature = await window.casperlabsHelper.sign(json,publicKeyHex,document.getElementById("Recipient").value)
            const deployObject = DeployUtil.deployFromJson(signature)

            // Here we are sending the signed deploy.
            const signed = await casperClient.putDeploy(deployObject.val);
            
            // Display transaction address
            const tx = document.getElementById("tx")
            tx.textContent = `tx: ${signed}`

        }

        async function contractCallJS2(){
            // Create a CLPublicKey of a caller.
            const publicKeyHex = await window.casperlabsHelper.getActivePublicKey();
            let publicKeyBytes = CLPublicKey.fromHex(publicKeyHex);
            let publicKey = new CLPublicKey(publicKeyBytes.data, CLPublicKeyTag.ED25519);

            // Define a hash of a variable repository contract.
            let contractHash = CasperClientHelper.utils.contractHashToByteArray("e0341dd5461ffa24d659550cbb5bfd4525f733d3f5a8b8aa7c06a842359bc01d");

            // Build arguments.
            let runtimeArgs = RuntimeArgs.fromMap({
                key: CLValueBuilder.string("hello"),
                value: CLValueBuilder.list([new CLU8(255), new CLU8(254)]),
                activation_time: CLValueBuilder.option(tsresult.None, new CLU64Type)
            });

            // To use activation time this can be used instead.
            // activation_time: CLValueBuilder.option(new Some(new CLU64(22)))

            // Build a deploy
            let session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(
                contractHash, "update_at", runtimeArgs
            );
            let payment = DeployUtil.standardPayment("1000000000");
            let params = new DeployUtil.DeployParams(publicKey, "integration-test", 1, undefined, undefined);
            let deploy = DeployUtil.makeDeploy(params, session, payment);

            // At this point the deploy needs to be signed and send to the network.
            // Instead it is printed to the stdout.
            console.log(JSON.stringify(DeployUtil.deployToJson(deploy), null, 4));

             // Turn your transaction data to format JSON
            const json = DeployUtil.deployToJson(deploy)
            console.log(json);

            // Sign transcation using casper-signer.
            const signature = await window.casperlabsHelper.sign(json,publicKeyHex,document.getElementById("Recipient").value)
            const deployObject = DeployUtil.deployFromJson(signature)

            // Here we are sending the signed deploy.
            const signed = await casperClient.putDeploy(deployObject.val);
            
            // Display transaction address
            const tx = document.getElementById("tx")
            tx.textContent = `tx: ${signed}`
        }
    </script>
}